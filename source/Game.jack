class Game {
  field Board board;
  field SpriteSheet sprites;

  constructor Game new() {
    let sprites = SpriteSheet.new();
    let board = Board.new(6, 6);
    return this;
  }

  function void printString(String str) {
    do Output.printString(str);
    do str.dispose();
    return;
  }

  method void move_cursor(int key) {
    var int piece;
    if (key = 128) { 
      do start_game();
    }
    if (key = 32) { 
      do board.make_move();
      do Sys.wait(20);
    }
    if (key = 49) {
      do board.choose_airdrop_piece(0);
      do Sys.wait(20);
    }
    if (key = 50) {
      do board.choose_airdrop_piece(1);
      do Sys.wait(20);
    }
    if (key = 51) {
      do board.choose_airdrop_piece(2);
      do Sys.wait(20);
    }
    if (key = 52) {
      do board.choose_airdrop_piece(3);
      do Sys.wait(20);
    }
    if (key = 53) {
      do board.choose_airdrop_piece(4);
      do Sys.wait(20);
    }
    if (key = 54) {
      do board.choose_airdrop_piece(5);
      do Sys.wait(20);
    }
    if (key = 55) {
      do board.choose_airdrop_piece(6);
      do Sys.wait(20);
    }
    if (key = 56) {
      do board.choose_airdrop_piece(7);
      do Sys.wait(20);
    }
    if (key = 57) {
      do board.choose_airdrop_piece(8);
      do Sys.wait(20);
    }
    if (key = 48) {
      do board.choose_airdrop_piece(9);
      do Sys.wait(20);
    }
    if (key = 45) {
      do board.choose_airdrop_piece(10);
      do Sys.wait(20);
    }
    if (key = 61) {
      do board.choose_airdrop_piece(11);
      do Sys.wait(20);
    }
    if (key = 131) { 
      do board.move_up();
      do Sys.wait(20);
    }
    if (key = 133) {
      do board.move_down();
      do Sys.wait(20);
    }
    if (key = 130) {
      do board.move_left();
      do Sys.wait(20);
    }
    if (key = 132) {
      do board.move_right();
      do Sys.wait(20);
    }
    if (key = 140) {
      do board.cancel_move();
      do Sys.wait(20);
    }
    let piece = board.get_square(board.get_cursor());
    return;
  }

  method void start_game() {
    do Screen.clearScreen();
    do draw_board(160,40);
    do Output.moveCursor(22, 26);
    do Game.printString("White to move"); 
    return;
  }

  method void run() {
    var boolean exit;
    var char key;
    do draw_splash();
    while (~exit) {
      let key = Keyboard.keyPressed(); 
      while (~(key = 0)) {
        let key = Keyboard.keyPressed();
        do move_cursor(key);
        do draw_board(160,40);
      }
    }
    return;
  }

  method void draw_splash() {
    do Output.moveCursor(2,3);
    do Game.printString("A Better 'Really Bad Chess'");
    do Output.moveCursor(2,42);
    do Game.printString("--by @lieuzhenghong");
    do Output.moveCursor(3,3);
    do Game.printString("__________________________________________________________");
    do Output.moveCursor(6,6);
    do Game.printString("* Arrow keys: move selection");
    do Output.moveCursor(8,6);
    do Game.printString("* Spacebar: select a piece and make a move");
    do Output.moveCursor(10,6);
    do Game.printString("* Escape: reset currently selected move");
    do Output.moveCursor(12,6);
    do Game.printString("* 1-9,0,-,=: 'Airdrop' captured pieces");
    do Output.moveCursor(14,6);
    do Game.printString("* Win by capturing the opponent's King");
    do Output.moveCursor(20,20);
    do Game.printString("Press Enter to begin");
    return;
  }

  // Draws a 32x32 sprite
  method void draw_sprite(int sprite_id, int x, int y) {
    var int mem_addr, counter;
    var int idx, sprite;
    let mem_addr = 16384 + ((x / 16) + (y*32));      // Floor division
    let counter = 0;
    let sprite = sprites.get_sprite(sprite_id);

    while (counter < 16) {
      let idx = counter * 32;
      do Memory.poke((mem_addr + idx), sprite[counter]);
      do Memory.poke((mem_addr + idx + 1), sprite[counter + 16]);
      do Memory.poke((mem_addr + idx + 512), sprite[counter + 32]);
      do Memory.poke((mem_addr + idx + 512 + 1), sprite[counter + 48]);
      let counter = counter + 1; 
    }
    return;
  }

  method void draw_board(int x, int y) {
    var int idx;
    var int i, j;
    var int colour;
    var int current_row, current_col;
    var int sq;
    var Array grid;
    var int SIZE, CELL_SIZE;

    let idx = 0;
    let i = 0;
    let colour = 0;
    let current_row = 0;
    let current_col = 0;
    let grid = board.get_grid();
    let SIZE = 192;
    let CELL_SIZE = 32;

    do Output.moveCursor(1,3);
    do Game.printString("A Better 'Really Bad Chess'");
    do Output.moveCursor(1,42);
    do Game.printString("--by @lieuzhenghong");

    // Draw the board
    while (idx < 36) {
      let current_row = (idx / 6);
      let current_col = Util.mod(idx, 6);
      // find out if the colour is black or white
      if (Util.mod(current_row, 2) > 0) {
        if (Util.mod(current_col, 2) > 0) {
          let colour = 0;
        }
        else {
          let colour = 1;
        }
      }
      else {
        if (Util.mod(current_col, 2) > 0) {
          let colour = 1;
        }
        else {
          let colour = 0;
        }
      }
      // Grab the piece on this square
      let sq = grid[idx] + colour;
      // Draw the sprite from the spritesheet
      do draw_sprite(sq, (x + (current_col * 32)),
                              (y + (current_row * 32)));
      // Unless it is a cursor square, in which case draw the cursor instead
      if (idx = board.get_cursor()) {
        do draw_sprite(30+colour, (x + (current_col *32)), (y + (current_row * 32)));
      }
      let idx = idx + 1;
    }

    // Draw the frame
    do Screen.drawLine(x, y-1, x+SIZE, y-1);
    do Screen.drawLine(x, y+SIZE, x+SIZE, y+SIZE);
    do Screen.drawLine(x+SIZE, y, x+SIZE, y+SIZE);
    do Screen.drawLine(x-1, y, x-1, y+SIZE);

    // Draw the hostage zones
    do Screen.drawLine(x-(3*CELL_SIZE)-1, y-1, x-(3*CELL_SIZE)-1, y+SIZE);
    do Screen.drawLine(x-CELL_SIZE-1, y-1, x-(3*CELL_SIZE)-1, y-1);
    do Screen.drawLine(x-CELL_SIZE-1, y+SIZE, x-(3*CELL_SIZE)-1, y+SIZE);
    do Screen.drawLine(x-CELL_SIZE+1, y-1, x-CELL_SIZE+1, y+SIZE);

    do Screen.drawLine(x+SIZE+CELL_SIZE, y-1, x+SIZE+(3*CELL_SIZE), y-1);
    do Screen.drawLine(x+SIZE+CELL_SIZE, y+SIZE, x+SIZE+(3*CELL_SIZE), y+SIZE);
    do Screen.drawLine(x+SIZE+CELL_SIZE-1, y, x+SIZE+CELL_SIZE-1, y+SIZE);
    do Screen.drawLine(x+SIZE+(3*CELL_SIZE), y, x+SIZE+(3*CELL_SIZE), y+SIZE);

    // Draw the hostages
    while (i < 6) {
      let j = i * 2;
      do draw_sprite(board.get_hostage(0, j), x-(3*CELL_SIZE), (y + (i * 32)));
      do draw_sprite(board.get_hostage(0, j+1), x-(2*CELL_SIZE), (y + (i * 32)));
      do draw_sprite(board.get_hostage(1, j), x+SIZE+CELL_SIZE, (y + (i * 32)));
      do draw_sprite(board.get_hostage(1, j+1), x+SIZE+CELL_SIZE+CELL_SIZE, (y + (i * 32)));
      let i = i + 1;
    }
    return;
  }
}
